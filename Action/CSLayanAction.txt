import { database, DatabaseTypes, QueryResult } from '@bahasa-ai/engine-database'
import {{BullJob}} from '../Service/{{BullJob}}'
import * as moment from 'moment-timezone'
import { RequestGetIntentAndEntity } from '@bahasa-ai/plugins-core-engine/dist/Types/AI'

import { RoomDataLayanType, TicketSolvedType, MessageDataLayanType } from '@bahasa-ai/plugins-iris'
import Response from '../Util/Response'
import { {{MainIntent}}, {{IntentNotAvailable}}, {{IntentNotWorkingHour}}, {{IntentPushTicketClosedByAgent}}, {{IntentPushTicketClosedByUser}} } from '../Bot/{{MainIntent}}/Main'
import { {{LayanService}} } from '../Service/{{LayanService}}'
import { PushResponse } from '../Bot/Base'
import { logger } from '../Util/Logger'
import CSResponse from '../Util/CSResponse'

export async function ActivateIris(event: EventMiddleware, data: DataMiddleware, __: StoryNextFunction) {
  const isWorkingTime = IsWorkingHour()
  if (!isWorkingTime) return await new {{IntentNotWorkingHour}}().push(event)

  const agent = await IsAgentAvailable()
  if (!agent) return await new {{IntentNotAvailable}}().push(event)


  const message = ['Halo, ada yang perlu bantuan']
  await new {{MainIntent}}().push(event)
  return await CreateTicket(event, data, message)


}

export async function CreateTicket(event: EventMiddleware, data: DataMiddleware, message: string[]) {
  const users = await database().User.get({
    agentId: { $eq: event.intent.agentId },
    sourceId: { $eq: event.sourceId },
    integration: { $eq: event.integration }
  })
  const user = users[0]

  const tags: string[] = ['Bantuan']


  const ticket: any = await {{LayanService}}.V1.createTicketWithAuth(`Token ${process.env.FONDASI_AUTH}`, {
    type: 'info',
    content: {
      type: 'text',
      text: message.join('\n')
    },
    user: {
      email: `${event.integration}-${event.sourceId}@Fondasi.io`,
      username: event.sourceId,
      password: 'random',
      name: event.user.name,
      role: 'customer',
      phone: event.sourceId
    },
    ticket: {
      tags: tags,
      room: {
        title: event.user.name
      }
    }
  })

  await database().User.update({ _id: { $eq: user._id } }, {
    userData: {
      ...user.userData,
      isInHumanFallback: true,
      FondasiAuthToken: Buffer.from(`${ticket.data.message.user.username}/token:${ticket.data.message.user.token}`).toString('base64'),
      FondasiTicketId: ticket.data.message.ticketId
    }
  })
}

export async function ToAgent(event: RequestGetIntentAndEntity) {
  const users = await database().User.get({
    agentId: { $eq: event.agentId },
    sourceId: { $eq: event.sourceId },
    integration: { $eq: event.integration }
  })
  const user = users[0]
  const dataLTMs = await database().LTM.get({
    agentId: { $eq: event.agentId },
    integration: { $eq: event.integration },
    sourceId: { $eq: user.sourceId }
  })
  const dataLTM = dataLTMs[0]
  const agent = { _id: user?._id, name: user?.name }

  await {{BullJob}}.build().cancelCloseRoom(user.sourceId)
  await {{BullJob}}.build().setcloseRoom({
    agentId: event.agentId,
    config: 'default',
    sourceId: user.sourceId,
    integration: event.integration,
    lastSessionId: dataLTM.lastSessionId,
    query: null,
    intent: null,
    sessionId: dataLTM.lastSessionId,
    context: null,
    messageId: null,
    user: null,
    isHumanFallback: true,
    humanData: agent
  } as EventMiddleware)
  if (event.query.toLowerCase().trim() === 'batal') {
    await {{LayanService}}.V1.solveTicket(`Token ${user.userData.FondasiAuthToken}`)
    await database().User.update({ _id: { $eq: user._id } }, {
      userData: {
        ...user.userData,
        isInHumanFallback: false,
        FondasiAuthToken: null,
        FondasiTicketId: null
      }
    })

    const STMs = await database().STM.get({
      sessionId: { $eq: dataLTM.lastSessionId }
    })
    const STM: QueryResult<DatabaseTypes.STM<MemorySTM>> = STMs[0]

    await database().STM.updateById(STM._id, {
      memory: STM.memory
    })

    const humanData = { _id: event.agentId, name: 'BOT' }
    return await pushResolvedResponseByCustomerPush(event.agentId, event.integration, user, dataLTM, false, humanData)
  }
  let comment: any
  if ((/^url\:.*mime\_type\:.*caption\:.*$/gi).test(event.query)) {
    const commentSplit = event.query.split(' ')
    const url = commentSplit[1]
    const mimeType = commentSplit[3]
    const caption = commentSplit.slice(5, commentSplit.length).join(' ')

    const determineContentType = (mimeType: string): 'text' | 'image' | 'document' | 'voice' | 'video' => {
      if ((/image/gi).test(mimeType)) {
        return 'image'
      }
      if ((/audio/gi).test(mimeType)) {
        return 'document' // to do audio
      }
      if ((/video/gi).test(mimeType)) {
        return 'document' // to do video
      }
      return 'document'
    }
    try {
      comment = await {{LayanService}}.V1.replyTicket(`Token ${user.userData.FondasiAuthToken}`, {
        type: 'byUser',
        isPublic: true,
        content: {
          type: determineContentType(mimeType),
          text: caption,
          attachment: {
            url: url,
            mimeType: mimeType
          }
        }
      })
    } catch (e) {
      comment = e
    }
  } else {
    try {
      comment = {{LayanService}}.V1.replyTicket(`Token ${user.userData.FondasiAuthToken}`, {
        type: 'byUser',
        isPublic: true,
        content: {
          type: 'text',
          text: event.query
        }
      })
    } catch (e) {
      comment = e
    }
  }
  return comment
}

export async function ToCustomer(event: { message?: MessageDataLayanType, ticket?: TicketSolvedType, room?: RoomDataLayanType, integration: string, agentId: string }) {
  if (event.ticket && event.ticket.solvedAt && event.ticket.solvedBy.role !== 'customer') {
    return await CloseRoom(event)
  }
  if (event.room) {
    return await AssignToAgent(event)
  }
  if (event.message) {
    return await ReplyToCustomer(event)
  }
}

export async function pushResponse(event: { message?: MessageDataLayanType, ticket?: TicketSolvedType, room?: RoomDataLayanType, integration: string, agentId: string }, user: any, dataLTM: any, response: any, isHumanFallback: boolean, agent?: any) {
  return await new PushResponse().push({
    agentId: event.agentId,
    config: 'default',
    sourceId: user.sourceId,
    integration: event.integration,
    lastSessionId: dataLTM.lastSessionId,
    query: null,
    intent: null,
    sessionId: dataLTM.lastSessionId,
    context: null,
    messageId: null,
    user: null,
    isHumanFallback: isHumanFallback,
    humanData: agent
  } as EventMiddleware, response)
}

export async function pushResolvedResponse(event: { message?: MessageDataLayanType, ticket?: TicketSolvedType, room?: RoomDataLayanType, integration: string, agentId: string }, user: any, dataLTM: any, isHumanFallback: boolean, agent?: any) {
  logger.debug('pushResolvedResponse %j', event)
  return await new {{IntentPushTicketClosedByAgent}}().push({
    agentId: event.agentId,
    config: 'default',
    sourceId: user.sourceId,
    integration: event.integration,
    lastSessionId: dataLTM.lastSessionId,
    query: null,
    intent: null,
    sessionId: dataLTM.lastSessionId,
    context: null,
    messageId: null,
    user: user.userData,
    isHumanFallback: isHumanFallback,
    humanData: agent
  } as EventMiddleware)
}

export async function pushResolvedResponseByCustomerPush(agentId: string, integration: string, user: any, dataLTM: any, isHumanFallback: boolean, agent?: any) {
  return await new {{IntentPushTicketClosedByUser}}().push({
    agentId: agentId,
    config: 'default',
    sourceId: user.sourceId,
    integration: integration,
    lastSessionId: dataLTM.lastSessionId,
    query: null,
    intent: null,
    sessionId: dataLTM.lastSessionId,
    context: null,
    messageId: null,
    user: null,
    isHumanFallback: isHumanFallback,
    humanData: agent
  } as EventMiddleware)
}

export async function solvedByCustomer(event: EventMiddleware, _data: DataMiddleware) {
  const users = await database().User.get({
    agentId: { $eq: event.agentId },
    integration: { $eq: event.integration },
    sourceId: { $eq: event.sourceId }
  })
  const user = users[0]
  await {{LayanService}}.V1.solveTicket(`Token ${user.userData.FondasiAuthToken}`, user.userData.FondasiTicketId)
  // return await new CancelFondasiPush().push(event)
}

export async function ReplyToCustomer(event: { message?: MessageDataLayanType, ticket?: TicketSolvedType, room?: RoomDataLayanType, integration: string, agentId: string }) {
  logger.debug('ReplyToCustomer %j', event)
  const users = await database().User.get({
    agentId: { $eq: event.agentId },
    integration: { $eq: event.integration },
    sourceId: { $eq: event.message?.ticket?.room?.initiatedBy?.phone }
  })
  if (users.length === 0) {
    return
  }
  const user = users[0]
  const dataLTMs = await database().LTM.get({
    agentId: { $eq: event.agentId },
    integration: { $eq: event.integration },
    sourceId: { $eq: user.sourceId }
  })
  const dataLTM = dataLTMs[0]

  const agent = { _id: event?.message?.user?._id, name: event?.message?.user?.name }

  let response: any = Response.text([event.message.content.text])
  if (event.message.content.type === 'image') {
    if ((/gif$/gi).test(event.message.content.attachment.mimeType)) {
      const filename = event.message.content.attachment.url.split('/')[4].split('.')[0]
      response = Response.document([{ link: event.message.content.attachment.url, caption: filename }])
    } else {
      response = Response.image([{ link: event.message.content.attachment.url, caption: event.message.content.text ? event.message.content.text : '' }])
    }
  } else if (event.message.content.type === 'video') {
    const filename = event.message.content.attachment.url.split('/')[4].split('.')[0]
    response = Response.video([{ link: event.message.content.attachment.url, caption: filename }])
  } else if (event.message.content.type === 'voice') {
    response = Response.audio([{ link: event.message.content.attachment.url }])
  } else if (event.message.content.type === 'document') {
    const filename = event.message.content.attachment.url.split('/')[4].split('.')[0]
    response = Response.document([{ link: event.message.content.attachment.url, caption: filename }])
    if (event.message.content.text) {
      response = Response.merge(
        Response.document([{ link: event.message.content.attachment.url, caption: filename }]),
        Response.text([event.message.content.text])
      )
    }
  }
  await {{BullJob}}.build().cancelCloseRoom(user.sourceId)
  await {{BullJob}}.build().setcloseRoom({
    agentId: event.agentId,
    config: 'default',
    sourceId: user.sourceId,
    integration: event.integration,
    lastSessionId: dataLTM.lastSessionId,
    query: null,
    intent: null,
    sessionId: dataLTM.lastSessionId,
    context: null,
    messageId: null,
    user: null,
    isHumanFallback: true,
    humanData: agent
  } as EventMiddleware)
  return await pushResponse(event, user, dataLTM, response, true, agent)
}

export async function AssignToAgent(event: { message?: MessageDataLayanType, ticket?: TicketSolvedType, room?: RoomDataLayanType, integration: string, agentId: string }) {
  logger.debug('AssignToAgent %j', event)
  const users = await database().User.get({
    agentId: { $eq: event.agentId },
    integration: { $eq: event.integration },
    sourceId: { $eq: event.room.initiatedBy?.phone }
  })
  const user = users.find(u => u.userData.FondasiTicketId === event.room.latestTicket._id)
  const dataLTMs = await database().LTM.get({
    agentId: { $eq: event.agentId },
    integration: { $eq: event.integration },
    sourceId: { $eq: user.sourceId }
  })
  const agent = {
    _id: typeof event?.room?.latestTicket?.assignedTo == 'string' ? event?.room?.latestTicket?.assignedTo : event?.room?.latestTicket?.assignedTo?._id,
    name: typeof event?.room?.latestTicket?.assignedTo == 'string' ? event?.room?.latestTicket?.assignedTo : event?.room?.latestTicket?.assignedTo?.name
  }
  const dataLTM = dataLTMs[0]
  const response = CSResponse().ConnectedToCS

  await database().User.update({ _id: { $eq: user._id } }, {
    userData: {
      ...user.userData,
      isInHumanFallback: true,
    }
  })

  await database().LTM.updateById(dataLTM._id, {
    memory: {
      ...dataLTM.memory,
      agent: agent
    }
  })

  if (!!dataLTM.memory.agent && dataLTM.memory.agent._id !== agent._id) {
    return
  } else {
    return await pushResponse(event, user, dataLTM, response, true, agent)
  }
}

export async function CloseRoom(event: { message?: MessageDataLayanType, ticket?: TicketSolvedType, room?: RoomDataLayanType, integration: string, agentId: string }) {
  logger.debug('CloseRoom %j', event)

  const users = await database().User.get({
    agentId: { $eq: event.agentId },
    integration: { $eq: event.integration },
    sourceId: { $eq: event.ticket?.room?.initiatedBy?.phone }
  })
  const user = users.find(u => u.userData.FondasiTicketId === event.ticket._id)
  const dataLTMs = await database().LTM.get({
    agentId: { $eq: event.agentId },
    integration: { $eq: event.integration },
    sourceId: { $eq: user.sourceId }
  })
  const dataLTM: QueryResult<DatabaseTypes.LTM<MemoryLTM>> = dataLTMs[0]
  console.log(dataLTM)
  dataLTM.memory = {
    ...dataLTM.memory,
    agent: null
  }
  await database().LTM.update({
    agentId: { $eq: event.agentId },
    integration: { $eq: event.integration },
    sourceId: { $eq: user.sourceId }
  }, {
    ...dataLTM
  })
  await database().User.update({ _id: { $eq: user._id } }, {
    userData: {
      ...user.userData,
      isInHumanFallback: false,
    }
  })

  const STMs = await database().STM.get({
    sessionId: { $eq: dataLTM.lastSessionId }
  })
  const STM: QueryResult<DatabaseTypes.STM<MemorySTM>> = STMs[0]

  await database().STM.updateById(STM._id, {
    memory: STM.memory
  })

  if (event.ticket.solvedBy.role === 'agent' || event.ticket.solvedBy.role === 'admin') {
    await pushResolvedResponse(event, user, dataLTM, false)
  }
}

async function IsAgentAvailable(): Promise<boolean> {
  if (Boolean(Number(process.env.FONDASI_CHECK_ONLINE_AGENT))) {
    const response = await {{LayanService}}.V2.getAgentsWithAuth(`Token ${process.env.FONDASI_AUTH}`, true)

    console.log(`IsAgentAvailable Agents List: ${JSON.stringify(response.data)}`)

    if (!response.data?.agents) {
      return false
    }

    if (response.data?.agents.length === 0) {
      return false
    }

    return true
  }
  return true
}

function IsWorkingDay(): boolean {
  const startDay = Number(process.env.WD_START)
  const endDay = Number(process.env.WD_END)


  const today = moment.tz('Asia/Jakarta').day()

  if (today < startDay || today > endDay) {
    logger.debug('IsWorkingDay not working day')
    return false
  }

  return true

}

function IsWorkingHour(): boolean {
  const isWorking = IsWorkingDay()
  if (!isWorking) return false

  const startTime = Number(process.env.WH_START)
  const endTime = Number(process.env.WH_END)

  const currentHour = moment().hours()
  if (currentHour < startTime || currentHour > endTime) {
    logger.debug('IsWorkingHour not working hour')

    return false
  }

  return true
}