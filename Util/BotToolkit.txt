// @TODO PRODUCTIZE THIS into BOT ENGINE

import { database } from '@bahasa-ai/engine-database'
import * as Sentry from '@sentry/node'
import { Cache } from '../Service/Cache'

import { EngineBull } from '../Service/HumanAgentBull/Main'
import { CacheKeyExcludeCsat } from '../Util/CSHelper'

export async function forceSessionExpired(sessionId: string) {
  const session = await database().Session.updateById(sessionId, {
    expiredAt: new Date(Date.now())
  })

  if (session) {
    return session
  } else {
    throw new Error('Session id not found in db!')
  }
}

export async function addChatbotReminderUtil(event: EventMiddleware) {
  // remove dulu, bull ga support update delay job
  await removeChatbotQueue(event)

  // add chatbot reminder queue
  await EngineBull.getInstance().addUserChatbotReminderQueue({
    agentId: event.agentId,
    integration: event.integration,
    sessionId: event.sessionId,
    sourceId: event.sourceId
  })

  // add chatbot close queue
  await EngineBull.getInstance().addChatbotCloseSessionQueue({
    agentId: event.agentId,
    integration: event.integration,
    sessionId: event.sessionId,
    sourceId: event.sourceId
  })

  // remove csat autoclose if exist
  await EngineBull.getInstance().cancelCsatAutoCloseQueue(event.integration, event.sourceId)
}

export async function removeChatbotReminderUtil(event: EventMiddleware) {
  return removeChatbotQueue(event)
}

async function removeChatbotQueue(event: EventMiddleware) {
  try {
    // remove chatbot reminder queue
    await EngineBull.getInstance().cancelUserChatbotReminderQueue(event.integration, event.sourceId)
    // remove autoclose chatbot session
    await EngineBull.getInstance().cancelChatbotCloseSessionQueue(event.integration, event.sourceId)
  } catch (error) {
    const dataerror = {
      messageId: event.messageId,
      agentId: event.agentId,
      sourceId: event.sourceId,
      query: event.query,
      intent: event.intent,
      context: event.context,
      user: event.user
    }
    Sentry.setContext('Event', dataerror)
    Sentry.captureException(error)
  }

  return true
}

export async function SetExcludeCsat(sourceId: string) {
  // exclude for 1 hour
  await Cache.build().set(CacheKeyExcludeCsat(sourceId), true, 'EX', 3600)
}

export async function IsExcludeCsat(sourceId: string) {
  // exclude for 1 hour
  const excluded: boolean = await Cache.build().get(CacheKeyExcludeCsat(sourceId))
  if (excluded) {
    return true
  }

  return false
}