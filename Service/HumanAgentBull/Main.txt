import Bull from 'bull'
import { BullAdapter, setQueues } from 'bull-board'
import { ChatbotAutoCloseInMinutes, ChatbotReminderInMinutes, TicketAutoCloseInMinutes, TicketReminderInMinutes, CsatAutocloseInMinutes } from '../../Util/CSHelper'
import { HumanAgentBullType } from '../../Type/HumanAgentBull'
import { jobLogger } from '../../Util/JobLogger'
import { AutoCloseTicket } from './AutoClose'
import { UserReminderTicket } from './UserReminder'
import { ChatbotNotifier } from './ChatbotNotifier'
import { ChatbotCloseSession } from './ChatbotCloseSession'
import { CsatAutoclose } from './CsatAutoclose'

export class EngineBull {
  private static instance: EngineBull

  // when connected to zendesk
  public autocancelQueue: Bull.Queue<HumanAgentBullType.AutoCloseTicketJob>
  // user reminder when connected to zendesk
  public ticketReminderQueue: Bull.Queue<HumanAgentBullType.AutoCloseTicketJob>

  // chatbot notifier n minutes
  public chatbotNotifierQueue: Bull.Queue<HumanAgentBullType.ChatbotNotifier>
  // close chatbot session in n minutes
  public chatbotCloseSessionQueue: Bull.Queue<HumanAgentBullType.ChatbotCloseSession>

  // csat autoclose in n minutes
  public csatAutoCloseQueue: Bull.Queue<HumanAgentBullType.CsatAutoClose>

  constructor() {
    const options: Bull.QueueOptions = {
      redis: {
        port: parseInt(process.env.REDIS_PORT) || 6379,
        host: process.env.REDIS_HOST || '127.0.0.1',
        password: process.env.REDIS_AUTH
      }
    }

    // init queue
    this.autocancelQueue = new Bull(`{{ClientSlug}}:${process.env.ENVIRONMENT}:engine:autocancel`, options)
    this.ticketReminderQueue = new Bull(`{{ClientSlug}}:${process.env.ENVIRONMENT}:engine:user_reminder`, options)
    this.chatbotNotifierQueue = new Bull(`{{ClientSlug}}:${process.env.ENVIRONMENT}:engine:chatbotNotifier`, options)
    this.chatbotCloseSessionQueue = new Bull(`{{ClientSlug}}:${process.env.ENVIRONMENT}:engine:chatbotCloseSession`, options)
    this.csatAutoCloseQueue = new Bull(`{{ClientSlug}}:${process.env.ENVIRONMENT}:engine:csatAutoCloseQueue`, options)

    // attach listener
    this.autocancelQueue.process(parseInt(process.env.BULL_MAX_WORKER) || 2, AutoCloseTicket)
    this.ticketReminderQueue.process(parseInt(process.env.BULL_MAX_WORKER) || 2, UserReminderTicket)
    this.chatbotNotifierQueue.process(parseInt(process.env.BULL_MAX_WORKER) || 2, ChatbotNotifier)
    this.chatbotCloseSessionQueue.process('*', parseInt(process.env.BULL_MAX_WORKER) || 2, ChatbotCloseSession)
    this.csatAutoCloseQueue.process(parseInt(process.env.BULL_MAX_WORKER) || 2, CsatAutoclose)

    setQueues([
      new BullAdapter(this.autocancelQueue),
      new BullAdapter(this.ticketReminderQueue),
      new BullAdapter(this.chatbotNotifierQueue),
      new BullAdapter(this.chatbotCloseSessionQueue),
      new BullAdapter(this.csatAutoCloseQueue)
    ])

    jobLogger(this.autocancelQueue)
  }

  async addAutocancelQueue(param: HumanAgentBullType.AutoCloseTicketJob) {
    // convert to miliseconds
    const autoCancelTime = TicketAutoCloseInMinutes() * 60 * 1000

    console.log('JOBID', this.autoCancelQueueJobId(param.sourceId, param.zendeskTicketId))
    await this.autocancelQueue.add(param, { delay: autoCancelTime, removeOnComplete: true, jobId: this.autoCancelQueueJobId(param.sourceId, param.zendeskTicketId) })
  }

  async cancelAutoCancelQueue(sourceId: string, ticketId: number) {
    const job = await this.autocancelQueue.getJob(this.autoCancelQueueJobId(sourceId, ticketId))
    if (!job) {
      return
    }

    return job.remove()
  }

  private autoCancelQueueJobId(sourceId: string, ticketId: number) {
    return `autoCancelJob:${sourceId}:${ticketId}`
  }

  async addUserReminderQueue(param: HumanAgentBullType.AutoCloseTicketJob) {
    // convert to miliseconds
    const ticketReminderTime = TicketReminderInMinutes() * 60 * 1000

    await this.ticketReminderQueue.add(param, { delay: ticketReminderTime, removeOnComplete: true, jobId: this.userReminderQueueJobId(param.sourceId, param.zendeskTicketId) })
  }

  private userReminderQueueJobId(sourceId: string, ticketId: number) {
    return `userReminderJob:${sourceId}:${ticketId}`
  }

  private chatbotNotifierQueueJobId(integration: string, sourceId: string) {
    return `chatbotNotifierJob:${integration}-${sourceId}`
  }

  private chatbotCloseSessionQueueJobId(integration: string, sourceId: string) {
    return `chatbotCloseSessionJob:${integration}-${sourceId}`
  }

  private csatAutocloseQueueJobId(integration: string, sourceId: string) {
    return `csatAutocloseJob:${integration}-${sourceId}`
  }

  async cancelUserReminderQueue(sourceId: string, ticketId: number) {
    const job = await this.ticketReminderQueue.getJob(this.userReminderQueueJobId(sourceId, ticketId))
    if (!job) {
      return
    }

    return job.remove()
  }

  /**
   * Send reminder to user if user didn't reply in X minutes
   */
  async addUserChatbotReminderQueue(param: HumanAgentBullType.ChatbotNotifier) {
    console.log('Adding chatbot reminder for ', param.sourceId)
    const chatbotReminderTime = ChatbotReminderInMinutes() * 60 * 1000
    await this.chatbotNotifierQueue.add(param, { delay: chatbotReminderTime, removeOnComplete: true, jobId: this.chatbotNotifierQueueJobId(param.integration, param.sourceId) })
  }

  async addChatbotCloseSessionQueue(param: HumanAgentBullType.ChatbotCloseSession) {
    console.log('Adding chatbot close for ', param.sourceId)
    const chatbotClosetime = ChatbotAutoCloseInMinutes() * 60 * 1000
    await this.chatbotCloseSessionQueue.add(param, { delay: chatbotClosetime, removeOnComplete: true, jobId: this.chatbotCloseSessionQueueJobId(param.integration, param.sourceId) })
  }

  async cancelUserChatbotReminderQueue(integration: string, sourceId: string) {
    const job = await this.chatbotNotifierQueue.getJob(this.chatbotNotifierQueueJobId(integration, sourceId))
    if (!job) {
      return
    }
    return job.remove()
  }

  async cancelChatbotCloseSessionQueue(integration: string, sourceId: string) {
    const job = await this.chatbotCloseSessionQueue.getJob(this.chatbotCloseSessionQueueJobId(integration, sourceId))
    if (!job) {
      return
    }
    return job.remove()
  }

  // csat autoclose
  async addCsatAutoCloseQueue(param: HumanAgentBullType.CsatAutoClose) {
    const csatAutoCloseTime = CsatAutocloseInMinutes() * 60 * 1000
    await this.csatAutoCloseQueue.add(param, { delay: csatAutoCloseTime, removeOnComplete: true, jobId: this.csatAutocloseQueueJobId(param.integration, param.sourceId) })
  }

  async cancelCsatAutoCloseQueue(integration: string, sourceId: string) {
    const job = await this.csatAutoCloseQueue.getJob(this.csatAutocloseQueueJobId(integration, sourceId))
    if (!job) {
      return
    }

    await job.remove()
    return job
  }

  static getInstance() {
    if (!this.instance) {
      this.instance = new EngineBull()
    }

    return this.instance
  }
}