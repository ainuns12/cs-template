import * as Bull from 'bull'
import { jobLogger } from '../../Util/JobLogger'
import { logger } from '../../Util/Logger'
import CloseRoom from './Job/CloseRoom'

export default class {{BullJob}} {
  private static instance: {{BullJob}}

  private closeRoom: Bull.Queue

  private constructor() {
    const options: Bull.QueueOptions = {
      redis: {
        port: parseInt(process.env.REDIS_PORT) || 6379,
        host: process.env.REDIS_HOST || '127.0.0.1',
        password: process.env.REDIS_AUTH
      },
    }
    this.closeRoom = new Bull('{{ClientSlug}}:closeRoom', options)

    this.closeRoom.process(1, CloseRoom())
    jobLogger(this.closeRoom)
  }

  public static build() {
    if (!{{BullJob}}.instance) {
      {{BullJob}}.instance = new {{BullJob}}()
    }
    return {{BullJob}}.instance
  }

  public getCloseRoomJob(): Bull.Queue<any> {
    return this.closeRoom
  }

  public async setcloseRoom(event: EventMiddleware) {
    const { sourceId, sessionId, integration, config, agentId } = event
    logger.info(`reminder to close room added ${sourceId}`)
    const closeRoomDelay = parseInt(process.env.AUTO_CLOSE_ROOM) || 1380

    const jobId = `close-room:${sourceId}`
    await deleteDelayedJob(jobId, this.closeRoom)

    this.closeRoom.add({ sourceId, sessionId, integration, config, agentId }, {
      removeOnComplete: true,
      delay: 1000 * 60 * closeRoomDelay,
      jobId
    })
  }

  public async cancelCloseRoom(sourceId: string) {
    logger.info(`remove job close room ${sourceId}`)
    await deleteDelayedJob(`close-room:${sourceId}`, this.closeRoom)
  }
}

async function deleteDelayedJob(jobId: string, queue: Bull.Queue<any>) {
  await queue.isReady()
  const job = await queue.getJob(jobId)
  if (job !== null && !await job.isActive()) {
    await job.remove()
  }
}